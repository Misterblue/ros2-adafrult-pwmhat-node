cmake_minimum_required(VERSION 3.5)

project(ros2-adafruilt-pwmhat-node)

# Default to C99
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(class_loader REQUIRED)

find_package(rosidl_default_generators REQUIRED)
rosidl_generate_interfaces(${PROJECT_NAME}
    "srv/BasicPWMChannels"
)

add_library(raspicli STATIC src/RaspiCLI.cpp)
add_library(raspicamcontrol STATIC src/RaspiCamControl.cpp)

# composable ros node
add_library(Ros2AdafruitPWMHatNode SHARED src/ros2_adafruit_pwmhat_node.py)
ament_target_dependencies(Ros2AdafruitPWMHatNode rclcpp sensor_msgs class_loader)
target_link_libraries(Ros2AdafruitPWMHatNode raspicamcontrol raspicli
    )
rclcpp_register_node_plugins(Ros2AdafruitPWMHatNode "Ros2AdafruitPWMHatNode")

add_executable(ros2_adafruit_pwmhat_node src/ros2_adafruit_pwmhat_node.py)
target_link_libraries(ros2_adafruit_pwmhat_node Ros2AdafruitPWMHatNode)

install(TARGETS
    ros2_adafruit_pwmhat_node
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
    RUNTIME DESTINATION bin
)

install(TARGETS
    ros2_adafruit_pwmhat_node
    DESTINATION lib/${PROJECT_NAME}
)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # remove the line when a copyright and license is present in all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # remove the line when this package is a git repo
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
